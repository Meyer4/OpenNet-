from flask import Flask, request, render_template_string, redirect, jsonify, send_file, abort, Response, url_for
import os
import sqlite3
import mimetypes
from werkzeug.utils import secure_filename
from urllib.parse import unquote

app = Flask(__name__)
UPLOAD_FOLDER = 'static/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# List of platforms
platforms = [
    {"name": "OpenBot", "route": "/openbot"},
    {"name": "E-Book", "route": "/ebook"},
    {"name": "AppBox", "route": "/appbox"},
    {"name": "Myface", "route": "/myface"},
    {"name": "MyVids", "route": "/myvids"},
    {"name": "piggy bank", "route": "/piggybank"},
    {"name": "SnapStyle", "route": "/snapstyle"},
]

@app.route('/')
def home():
    query = request.args.get('search', '').lower()
    matched = [p for p in platforms if query in p['name'].lower()] if query else platforms
    apps_html = ''.join(f'<div class="app"><a href="{p["route"]}">{p["name"]}</a></div>' for p in matched)

    return render_template_string(f"""
    <html><head><title>OpenNet OS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
    body {{ margin: 0; font-family: sans-serif; background: #111; color: white; text-align: center; }}
    .app-list {{ display: flex; flex-wrap: wrap; justify-content: center; gap: 15px; margin-top: 20px; }}
    .app {{ background: #222; padding: 10px 20px; border-radius: 10px; width: 100px; }}
    .app a {{ color: white; text-decoration: none; }}
    .bottom-nav {{
        position: fixed; bottom: 0; width: 100%;
        display: flex; justify-content: space-around;
        background: #000; padding: 12px 0; border-top: 1px solid #333;
    }}
    .nav-item {{ flex: 1; color: white; font-size: 14px; }}
    </style></head>
    <body>
        <h2>OpenNet</h2>
        <form action="/" method="get">
            <input name="search" placeholder="Search" style="padding:8px;border-radius:5px;width:70%;">
            <button style="padding:8px">Go</button>
        </form>
        <div class="app-list">{apps_html}</div>
        <div class="bottom-nav">
            <div class="nav-item"><a href="/" style="color:white;">Home</a></div>
            <div class="nav-item"><a href="/explore" style="color:white;">Explore</a></div>
            <div class="nav-item"><a href="/settings" style="color:white;">Settings</a></div>
        </div>
    </body></html>
    """)

@app.route('/openbot')
def openbot_ui():
    return """
<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>OpenBot Chat Light UI</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
  <style>
    /* Reset */
    *, *::before, *::after {
      box-sizing: border-box;
    }
    body, html {
      margin: 0; padding: 0;
      height: 100%;
      background: #fff;
      font-family: 'Poppins', sans-serif;
      color: #222;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    header {
      position: fixed;
      top: 12px;
      left: 50%;
      transform: translateX(-50%);
      background: #f9f9f9;
      border-radius: 36px;
      box-shadow:
        4px 4px 8px rgba(0,0,0,0.1),
        -4px -4px 8px rgba(255,255,255,0.9);
      padding: 12px 40px;
      font-weight: 600;
      font-size: 1.5rem;
      user-select: none;
      max-width: 480px;
      width: calc(100% - 48px);
      z-index: 20;
      color: #333;
      text-align: center;
      border: 1.5px solid #ddd;
    }
    #chat-container {
      flex: 1;
      margin-top: 72px;
      margin-bottom: 160px;
      overflow-y: auto;
      padding-right: 8px;
      display: flex;
      flex-direction: column;
      gap: 20px;
      scrollbar-width: thin;
      scrollbar-color: rgba(0,0,0,0.1) transparent;
      max-width: 480px;
      width: 100%;
      margin-left: auto;
      margin-right: auto;
      background: #fff;
    }
    #chat-container::-webkit-scrollbar {
      width: 8px;
    }
    #chat-container::-webkit-scrollbar-track {
      background: transparent;
    }
    #chat-container::-webkit-scrollbar-thumb {
      background-color: rgba(0,0,0,0.1);
      border-radius: 10px;
    }
    .message {
      max-width: 80%;
      padding: 18px 24px;
      border-radius: 30px;
      font-size: 1rem;
      line-height: 1.4;
      position: relative;
      user-select: text;
      opacity: 0;
      animation: fadeUp 0.3s forwards;
      word-break: break-word;
      box-shadow:
        2px 2px 8px rgba(0,0,0,0.08);
      background: #f5f5f5;
      color: #222;
    }
    @keyframes fadeUp {
      from {
        opacity: 0;
        transform: translateY(12px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    .user-msg {
      background: #e0f7e7;
      color: #1a3b1a;
      align-self: flex-end;
      border-bottom-right-radius: 6px;
      box-shadow:
        2px 2px 6px #a0d5af,
        -2px -2px 6px #c2e7ca;
    }
    .ai-msg {
      background: #f0f0f0;
      color: #555;
      align-self: flex-start;
      border-bottom-left-radius: 6px;
      box-shadow:
        inset 2px 2px 6px #ddd,
        inset -2px -2px 6px #fff;
    }
    .timestamp {
      font-size: 10px;
      color: #999;
      margin-top: 6px;
      opacity: 0.7;
      font-weight: 500;
      user-select: none;
    }
    #typing-indicator {
      align-self: flex-start;
      display: flex;
      align-items: center;
      gap: 8px;
      background: #f0f0f0;
      color: #888;
      padding: 12px 24px;
      border-radius: 30px 30px 30px 6px;
      font-style: italic;
      user-select: none;
      animation: fadeUp 0.3s forwards;
      box-shadow:
        inset 2px 2px 6px #ddd,
        inset -2px -2px 6px #fff;
    }
    .dot {
      width: 10px;
      height: 10px;
      background: #57cc99;
      border-radius: 50%;
      animation: blink 1.4s infinite;
    }
    .dot:nth-child(2) {
      animation-delay: 0.2s;
    }
    .dot:nth-child(3) {
      animation-delay: 0.4s;
    }
    @keyframes blink {
      0%, 80%, 100% {
        opacity: 0.3;
      }
      40% {
        opacity: 1;
      }
    }
    #input-container {
      position: fixed;
      bottom: 24px;
      left: 50%;
      transform: translateX(-50%);
      background: #f9f9f9;
      border-radius: 36px;
      box-shadow:
        4px 4px 8px rgba(0,0,0,0.1),
        -4px -4px 8px rgba(255,255,255,0.9);
      display: flex;
      flex-direction: column;
      gap: 8px;
      padding: 16px 24px 20px;
      max-width: 480px;
      width: calc(100% - 48px);
      user-select: none;
      z-index: 20;
      border: 1.5px solid #ddd;
    }
    #input-top-row {
      display: flex;
      align-items: flex-start;
      gap: 12px;
      position: relative;
    }
    #chat-input {
      flex-grow: 1;
      resize: none;
      border: 1.5px solid #ccc;
      background: #fff;
      color: #222;
      font-size: 1rem;
      line-height: 1.4;
      padding: 12px 16px;
      min-height: 48px;
      max-height: 120px;
      border-radius: 24px;
      outline: none;
      user-select: text;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
      overflow-y: auto;
      box-shadow: 0 2px 6px rgba(0,0,0,0.07);
      width: 100%;
    }
    #chat-input::placeholder {
      color: #999;
    }
    #chat-input:focus {
      border-color: #57cc99;
      box-shadow: 0 0 8px rgba(87,204,153,0.6);
    }
    #send-btn {
      background: #57cc99;
      border-radius: 50%;
      border: none;
      width: 48px;
      height: 48px;
      font-size: 26px;
      color: #fff;
      cursor: pointer;
      transition: background-color 0.25s ease;
      user-select: none;
      box-shadow: 0 3px 8px rgba(87,204,153,0.6);
      position: absolute;
      right: 0;
      bottom: 0;
      transform: translate(50%, 50%);
      z-index: 5;
    }
    #send-btn:hover:not(:disabled) {
      background: #4aad7f;
    }
    #send-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    #bottom-icons {
      display: flex;
      gap: 12px;
      align-items: center;
      justify-content: flex-start;
      padding-left: 4px;
    }
    .icon-btn {
      background: #57cc99;
      border-radius: 50%;
      border: none;
      width: 44px;
      height: 44px;
      cursor: pointer;
      color: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: filter 0.25s ease;
      box-shadow: 0 3px 8px rgba(87,204,153,0.6);
      padding: 8px;
    }
    .icon-btn:hover {
      filter: brightness(1.15);
    }
    .icon-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    #voice-btn.active {
      background: #e74c3c;
      box-shadow: 0 3px 8px rgba(231,76,60,0.7);
      color: #fff;
    }
    svg {
      width: 24px;
      height: 24px;
      fill: currentColor;
      pointer-events: none;
      user-select: none;
    }
    #chat-input::-webkit-scrollbar {
      width: 6px;
    }
    #chat-input::-webkit-scrollbar-track {
      background: transparent;
    }
    #chat-input::-webkit-scrollbar-thumb {
      background: rgba(87,204,153,0.3);
      border-radius: 10px;
    }
    @media (max-width: 520px) {
      header {
        top: 8px;
        padding: 10px 20px;
        font-size: 1.3rem;
        width: calc(100% - 32px);
      }
      #chat-container {
        margin-top: 64px;
        margin-bottom: 140px;
        padding-right: 4px;
      }
      #input-container {
        bottom: 16px;
        padding: 12px 20px 16px;
        width: calc(100% - 32px);
      }
      #input-top-row {
        gap: 8px;
      }
      #chat-input {
        min-height: 40px;
        max-height: 100px;
        font-size: 0.95rem;
      }
      .icon-btn {
        width: 40px;
        height: 40px;
        padding: 6px;
      }
      #send-btn {
        width: 44px;
        height: 44px;
        font-size: 22px;
      }
    }
  </style>
</head>
<body>
  <header>OpenBot</header>

  <div id="chat-container" role="log" aria-live="polite" aria-atomic="false" aria-relevant="additions">
    <!-- Messages appended here -->
  </div>

  <form id="input-container" onsubmit="return false;" aria-label="Send message">
    <div id="input-top-row">
      <textarea
        id="chat-input"
        rows="1"
        placeholder="Ask me anything..."
        aria-label="Type your message here"
        autocomplete="off"
        spellcheck="false"
        required
      ></textarea>

      <button
        id="send-btn"
        type="submit"
        title="Send Message"
        aria-label="Send message"
        disabled
      >
        <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
          <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"></path>
        </svg>
      </button>
    </div>

    <div id="bottom-icons">
      <button
        id="voice-btn"
        type="button"
        title="Start Voice Input"
        aria-pressed="false"
        aria-label="Voice input"
        class="icon-btn"
      >
        <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
          <path d="M12 14a3 3 0 0 0 3-3V5a3 3 0 0 0-6 0v6a3 3 0 0 0 3 3zM19 11v1a7 7 0 0 1-14 0v-1H3v1a9 9 0 0 0 8 8.94V23h2v-2.06A9 9 0 0 0 21 12v-1h-2z"></path>
        </svg>
      </button>

      <label for="file-picker" class="icon-btn" title="Pick Photo or File" role="button" tabindex="0" aria-label="Pick photo or file">
        <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
          <path d="M21 19V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM5 5h14v14H5V5zm6 3a3 3 0 1 1 0 6 3 3 0 0 1 0-6z"></path>
          <circle cx="11" cy="14" r="1.5"></circle>
        </svg>
      </label>
      <input type="file" id="file-picker" style="display:none" />
    </div>
  </form>

  <script>
    const chatContainer = document.getElementById('chat-container');
    const input = document.getElementById('chat-input');
    const sendBtn = document.getElementById('send-btn');
    const voiceBtn = document.getElementById('voice-btn');
    const filePicker = document.getElementById('file-picker');

    input.addEventListener('input', () => {
      input.style.height = 'auto';
      input.style.height = input.scrollHeight + 'px';
      sendBtn.disabled = !input.value.trim();
    });

    function addMessage(text, sender) {
      const msg = document.createElement('div');
      msg.classList.add('message', sender === 'user' ? 'user-msg' : 'ai-msg');
      msg.setAttribute('role', 'article');
      msg.textContent = text;

      const ts = document.createElement('div');
      ts.classList.add('timestamp');
      ts.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      msg.appendChild(ts);

      chatContainer.appendChild(msg);
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function showTypingIndicator() {
      removeTypingIndicator();

      const typing = document.createElement('div');
      typing.id = 'typing-indicator';
      typing.setAttribute('aria-live', 'assertive');
      typing.innerHTML = `
        AI is typing
        <span class="dot"></span>
        <span class="dot"></span>
        <span class="dot"></span>
      `;
      chatContainer.appendChild(typing);
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function removeTypingIndicator() {
      const typing = document.getElementById('typing-indicator');
      if (typing) typing.remove();
    }

    // The sendMessage function here is for you to connect to your backend API later
    async function sendMessage() {
      const text = input.value.trim();
      if (!text) return;
      addMessage(text, 'user');
      input.value = '';
      input.style.height = 'auto';
      sendBtn.disabled = true;
      input.focus();
      showTypingIndicator();

      try {
        // Later connect to your /openbot/api POST here
        // const res = await fetch('/openbot/api', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ question: text }) });
        // const data = await res.json();
        // removeTypingIndicator();
        // addMessage(data.answer, 'ai');
        removeTypingIndicator();
        addMessage("This is a demo response from OpenBot UI router.", 'ai');
      } catch (error) {
        removeTypingIndicator();
        addMessage('Error contacting OpenBot API.', 'ai');
      }
    }

    sendBtn.addEventListener('click', sendMessage);
    input.addEventListener('keydown', e => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
  </script>
</body>
</html>
"""

@app.route('/openbot/api', methods=['POST'])
def openbot_api():
    import os
    from PyPDF2 import PdfReader
    import difflib
    import threading
    import time

    # Simple cache dictionary for loaded docs and their text
    if not hasattr(openbot_api, "DOC_CACHE"):
        openbot_api.DOC_CACHE = {}
        openbot_api.CACHE_LOCK = threading.Lock()
        openbot_api.CACHE_TTL = 300  # cache time to live in seconds

        def cache_cleaner():
            while True:
                time.sleep(openbot_api.CACHE_TTL)
                with openbot_api.CACHE_LOCK:
                    now = time.time()
                    keys_to_delete = [k for k, v in openbot_api.DOC_CACHE.items() if now - v['time'] > openbot_api.CACHE_TTL]
                    for k in keys_to_delete:
                        del openbot_api.DOC_CACHE[k]

        threading.Thread(target=cache_cleaner, daemon=True).start()

    def extract_text_from_pdf(path):
        try:
            with openbot_api.CACHE_LOCK:
                if path in openbot_api.DOC_CACHE:
                    openbot_api.DOC_CACHE[path]['time'] = time.time()
                    return openbot_api.DOC_CACHE[path]['text']

            reader = PdfReader(path)
            text = ""
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"

            with openbot_api.CACHE_LOCK:
                openbot_api.DOC_CACHE[path] = {'text': text, 'time': time.time()}
            return text
        except Exception:
            return ""

    def extract_text_from_txt(path):
        try:
            with openbot_api.CACHE_LOCK:
                if path in openbot_api.DOC_CACHE:
                    openbot_api.DOC_CACHE[path]['time'] = time.time()
                    return openbot_api.DOC_CACHE[path]['text']

            with open(path, "r", encoding="utf-8", errors="ignore") as f:
                text = f.read()

            with openbot_api.CACHE_LOCK:
                openbot_api.DOC_CACHE[path] = {'text': text, 'time': time.time()}
            return text
        except Exception:
            return ""

    def find_relevant_snippet(text, query, snippet_length=300):
        lower_text = text.lower()
        idx = lower_text.find(query)
        if idx == -1:
            return None
        start = max(0, idx - snippet_length // 2)
        end = min(len(text), idx + snippet_length // 2)
        snippet = text[start:end].strip()
        if start > 0:
            snippet = "..." + snippet
        if end < len(text):
            snippet = snippet + "..."
        return snippet.replace('\n', ' ')

    def fuzzy_search(text, query, threshold=0.6):
        # Use difflib to find close matches in chunks
        text = text.lower()
        query = query.lower()
        seq_matcher = difflib.SequenceMatcher(None, text, query)
        return seq_matcher.ratio() >= threshold

    docs_path = "/storage/emulated/0/Documents"
    instructions = "You are OpenBot, a helpful assistant. Answer clearly based on the documents."

    query = request.json.get("question", "").strip().lower()
    answer_text = "Sorry, I couldn't find relevant information."

    best_match = None
    best_snippet = None
    best_score = 0.0

    if os.path.exists(docs_path):
        for root, dirs, files in os.walk(docs_path):
            for file in files:
                file_lower = file.lower()
                file_path = os.path.join(root, file)

                # Fuzzy match filename
                ratio = difflib.SequenceMatcher(None, file_lower, query).ratio()
                if ratio > best_score and ratio > 0.5:
                    best_score = ratio
                    best_match = file
                    best_snippet = f"Document title closely matches your query: {file}"

                # Support PDF and TXT
                if file_lower.endswith(".pdf"):
                    full_text = extract_text_from_pdf(file_path)
                elif file_lower.endswith(".txt"):
                    full_text = extract_text_from_txt(file_path)
                else:
                    continue

                if full_text:
                    if query in full_text.lower() or fuzzy_search(full_text, query):
                        snippet = find_relevant_snippet(full_text, query)
                        if snippet:
                            score = difflib.SequenceMatcher(None, snippet.lower(), query).ratio()
                            if score > best_score:
                                best_score = score
                                best_match = file
                                best_snippet = snippet

            if best_match and best_score > 0.5:
                break

    if best_match and best_snippet:
        answer_text = f"{instructions}\nFound in document: {best_match}\n\nRelevant excerpt:\n{best_snippet}"

    return jsonify({"answer": answer_text})

@app.route('/ebook')
def ebook():
    return "<h1 style='color:white;background:black;text-align:center;'>E-Book</h1>"

@app.route('/appbox')
def chat():
    return "<h1 style='color:white;background:black;text-align:center;'>AppBox</h1>"

@app.route('/myface')
def mypla():
    return "<h1 style='color:white;background:black;text-align:center;'>MyFace</h1>"
